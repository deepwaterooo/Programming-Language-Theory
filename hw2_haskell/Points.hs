module Points where
 
import Graphics.Rendering.OpenGL
 
points :: Int -> [(GLfloat, GLfloat, GLfloat)]
--points n = [ (sin (2 * pi * k/n'), cos (2 * pi * k/n'), 0) | k <- [1..n'] ]
points n = [
  (-1.0, -1.0, -1.0) --fixed for 27 cubes, which appearly won't work
--  (-1.0, -1.0, 0.0)
--  (-1.0, -1.0, 1.0)
--  (-1.0, 0.0, -1.0)
--  (-1.0, 0.0, 0.0)
--  (-1.0, 0.0, 1.0)
--  (-1.0, 1.0, -1.0)
--  (-1.0, 1.0, 0.0)
--  (-1.0, 1.0, 1.0)
--  (0.0, -1.0, -1.0)
--  (0.0, -1.0, 0.0)
--  (0.0, -1.0, 1.0)
--  (0.0, 0.0, -1.0)
--  (0.0, 0.0, 0.0)
--  (0.0, 0.0, 1.0)
--  (0.0, 1.0, -1.0)
--  (0.0, 1.0, 0.0)
--  (0.0, 1.0, 1.0)
--  (1.0, -1.0, -1.0)
--  (1.0, -1.0, 0.0)
--  (1.0, -1.0, 1.0)
--  (1.0, 0.0, -1.0)
--  (1.0, 0.0, 0.0)
--  (1.0, 0.0, 1.0)
--  (1.0, 1.0, -1.0)
--  (1.0, 1.0, 0.0)
--  (1.0, 1.0, 1.0)
  {-
  (sin (2 * pi * k/n'),
             cos (2 * pi * k/n'),
              case n' of
                x | (x - 1) / 9 == 0 -> -1
                x | (x - 1) / 9 == 1 -> 0
                _ -> 1
            ) | k <- [1..n'] -}
  ]
   --where n' = fromIntegral n
